# генератор - это функция "помнящая" свое состояние
# т.е. "отложенное вычисление", "вычисление по требованию"

# Главная фишка генератора, в том что значения которые он возвращает могут не храниться в памяти,
# а ГЕНЕРИРОВАТЬСЯ "по требованию" при каждом вызове.
# Например при разработке вьювера для огромного бинарного файла можно применить этот подход,
# чтобы считывать файл частями по требованию, а не хранить весь файл в памяти

# Два варианта задать генератор:

# Вариант 1. С помощью yield
def items_in_key_order_1(dict_):
    for key in sorted(dict_):
        yield key, dict_[key]


# Вариант 2. С помощью выражения-генератора
# "Анонимная функция", похожа на ламбда, также называется выражение-генератор, задается в круглых скобках
# конструкция в круглых скобках - это и есть выражение-генератор, его можно присвоить переменной
def items_in_key_order_2(dict_):
    return ((key, dict_[key]) for key in sorted(dict_))


# Различия: В Вариант 1 необходима функция, в Вариант 2 - без функции можно обойтись

d = dict(c=1, b=2, a=3)

l1 = [i for i in items_in_key_order_1(d)]
l2 = [i for i in items_in_key_order_2(d)]

# Выражение-генератор без оборачивания в функцию
gen = ((key, d[key]) for key in sorted(d))
l3 = [i for i in gen]
