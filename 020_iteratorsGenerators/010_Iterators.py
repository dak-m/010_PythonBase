# Итерируемый тип данных - тип данных, который может возвращать свои элементы по одному
# иначе говоря - который можно обойти циклом
# Формально - любой объект, имеющий метод __iter__() и/или __getitem__() является итерируемым и предоставляет итератор
# Итератор - это объект имеющий метод __next__(), который при каждом вызове возвращает очередной элемент и возбуждает
# исключение StopIteration, если элементов больше нет
# Примечание: Итерируемый объект и его итератор могут быть двумя различными объектами,
# но чаще всего сам же итерируемый объект и является итератором

s = '132'
t = '456'
k = [False, True, 0, '', 99]

# любой конечный итерируемый объект можно преобразовать в кортеж или список
print(tuple(s), list(s))

# range() чаще всего применяют для создания списков/кортежей и для организации циклов for i in range(10)
print(tuple(range(5)), list(range(5)))

# all() - все элементы Логически=Истина, any() - хотя бы один Логически=истина
print(all(s), all(k), any(k))

print(max(s), max(s, key=lambda j: 1/int(j)))

print([i for i in enumerate(k)])  # пронумеровать

print([i for i in zip(k, s)])  # попарно соединить

# эквивалент цикла for ... in [...]
i = iter(k)  # получаем тот самый итератор __iter__()
while True:
    try:
        print(next(i))
    except StopIteration:
        break
